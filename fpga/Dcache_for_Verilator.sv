// Generated by CIRCT firtool-1.38.0
// VCS coverage exclude_file
module mem_combMem_Data(
  input  [11:0] R0_addr,
  input         R0_en,
                R0_clk,
  input  [11:0] W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  input  [7:0]  W0_mask,
  output [63:0] R0_data
);

  (* rw_addr_collision = "yes" *)
  reg [63:0] Memory[0:4095];

  initial begin
    $readmemh("vector_matmul_data.mem", Memory);
  end

  reg        _GEN;
  reg [11:0] _GEN_0;
  always @(posedge R0_clk) begin
    _GEN <= R0_en;
    _GEN_0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & W0_mask[0])
      Memory[W0_addr][32'h0 +: 8] <= W0_data[7:0];
    if (W0_en & W0_mask[1])
      Memory[W0_addr][32'h8 +: 8] <= W0_data[15:8];
    if (W0_en & W0_mask[2])
      Memory[W0_addr][32'h10 +: 8] <= W0_data[23:16];
    if (W0_en & W0_mask[3])
      Memory[W0_addr][32'h18 +: 8] <= W0_data[31:24];
    if (W0_en & W0_mask[4])
      Memory[W0_addr][32'h20 +: 8] <= W0_data[39:32];
    if (W0_en & W0_mask[5])
      Memory[W0_addr][32'h28 +: 8] <= W0_data[47:40];
    if (W0_en & W0_mask[6])
      Memory[W0_addr][32'h30 +: 8] <= W0_data[55:48];
    if (W0_en & W0_mask[7])
      Memory[W0_addr][32'h38 +: 8] <= W0_data[63:56];
  end // always @(posedge)
  assign R0_data = _GEN ? Memory[_GEN_0] : 64'bx;
endmodule

module Dcache_for_Verilator(
  input         clock,
                reset,
                io_ar_valid,
  input  [63:0] io_ar_bits_addr,
  input  [2:0]  io_ar_bits_prot,
  input         io_aw_valid,
  input  [63:0] io_aw_bits_addr,
  input  [2:0]  io_aw_bits_prot,
  input         io_b_ready,
                io_r_ready,
                io_w_valid,
  input  [63:0] io_w_bits_data,
  input  [7:0]  io_w_bits_strb,
  output        io_ar_ready,
                io_aw_ready,
                io_b_valid,
  output [2:0]  io_b_bits_resp,
  output        io_r_valid,
  output [63:0] io_r_bits_data,
  output [2:0]  io_r_bits_resp,
  output        io_w_ready,
                debug_valid,
  output [31:0] debug_bits
);

  wire [63:0]      _mem_ext_R0_data;
  reg              debugToHost_valid;
  reg  [31:0]      debugToHost_bits;
  wire [14:0]      _GEN = io_ar_bits_addr[14:0] - 15'h4000;
  wire [63:0]      internalWriteAddr = io_aw_bits_addr - 64'h4000;
  reg  [2:0]       io_r_bits_data_REG;
  wire [7:0][63:0] _GEN_0 =
    {{{56'h0, _mem_ext_R0_data[63:56]}},
     {{48'h0, _mem_ext_R0_data[63:48]}},
     {{40'h0, _mem_ext_R0_data[63:40]}},
     {{32'h0, _mem_ext_R0_data[63:32]}},
     {{24'h0, _mem_ext_R0_data[63:24]}},
     {{16'h0, _mem_ext_R0_data[63:16]}},
     {{8'h0, _mem_ext_R0_data[63:8]}},
     {_mem_ext_R0_data}};
  reg              io_r_valid_REG;
  wire [63:0]      _GEN_1 =
    internalWriteAddr[2:0] == 3'h2
      ? {io_w_bits_data[47:0], 16'h0}
      : internalWriteAddr[2:0] == 3'h1 ? {io_w_bits_data[55:0], 8'h0} : io_w_bits_data;
  wire [7:0][63:0] _GEN_2 =
    {{{io_w_bits_data[7:0], 56'h0}},
     {{io_w_bits_data[15:0], 48'h0}},
     {{io_w_bits_data[23:0], 40'h0}},
     {{io_w_bits_data[31:0], 32'h0}},
     {{io_w_bits_data[39:0], 24'h0}},
     {_GEN_1},
     {_GEN_1},
     {_GEN_1}};
  wire             _io_b_valid_T = io_aw_valid & io_w_valid;
  wire             mem_MPORT_en = _io_b_valid_T & internalWriteAddr < 64'h1FFF;
  wire [7:0][7:0]  _GEN_3 =
    {{{io_w_bits_strb[0], 7'h0}},
     {{io_w_bits_strb[1:0], 6'h0}},
     {{io_w_bits_strb[2:0], 5'h0}},
     {{io_w_bits_strb[3:0], 4'h0}},
     {{io_w_bits_strb[4:0], 3'h0}},
     {{io_w_bits_strb[5:0], 2'h0}},
     {{io_w_bits_strb[6:0], 1'h0}},
     {io_w_bits_strb}};
  reg              io_b_valid_REG;
  always @(posedge clock) begin
    if (reset) begin
      debugToHost_valid <= 1'h0;
      debugToHost_bits <= 32'h0;
    end
    else begin
      automatic logic _T_46 = _io_b_valid_T & io_aw_bits_addr == 64'h10000000;
      debugToHost_valid <= ~mem_MPORT_en & _T_46;
      if (mem_MPORT_en | ~_T_46) begin
      end
      else
        debugToHost_bits <= io_w_bits_data[31:0];
    end
    io_r_bits_data_REG <= _GEN[2:0];
    io_r_valid_REG <= io_ar_valid;
    io_b_valid_REG <= _io_b_valid_T;
  end // always @(posedge)
  mem_combMem_Data mem_ext (
    .R0_addr (_GEN[14:3]),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (internalWriteAddr[14:3]),
    .W0_en   (mem_MPORT_en),
    .W0_clk  (clock),
    .W0_data (_GEN_2[internalWriteAddr[2:0]]),
    .W0_mask (_GEN_3[internalWriteAddr[2:0]]),
    .R0_data (_mem_ext_R0_data)
  );
  assign io_ar_ready = 1'h1;
  assign io_aw_ready = 1'h1;
  assign io_b_valid = io_b_valid_REG;
  assign io_b_bits_resp = 3'h0;
  assign io_r_valid = io_r_valid_REG;
  assign io_r_bits_data = _GEN_0[io_r_bits_data_REG];
  assign io_r_bits_resp = 3'h0;
  assign io_w_ready = 1'h1;
  assign debug_valid = debugToHost_valid;
  assign debug_bits = debugToHost_bits;
endmodule

